{{> template/header}}
<section class="cart">
  <h2>Your Shopping Cart</h2>

  {{#if cartItems.length}}

    <div class="cart-summary">
      <h3>Order Summary</h3>
      <div class="summary-row total">
        <span>Total</span>
        <span>${{total}}</span>
      </div>
      <a href="/order" class="btn checkout-btn">Proceed to Checkout</a>
      <a href="/gallery" class="continue-shopping">Continue Shopping</a>
    </div>
    <div class="cart-items">
      {{#each cartItems}}
        <div class="cart-item" data-cart-id="{{cart_id}}" data-cake-id="{{id}}" data-price="{{price}}">
          <img src="{{image_url}}" alt="{{name}}" class="cart-item-image" />
          <div class="item-details">
            <div class="item-header">
              <h3>{{name}}</h3>
              <button class="remove-item" onclick="removeCartItem('{{cart_id}}')">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <line x1="18" y1="6" x2="6" y2="18"></line>
                  <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
              </button>
            </div>
            <p class="item-description">{{description}}</p>
            <div class="item-controls">
              <div class="quantity-controls">
                <button class="quantity-btn" onclick="updateQuantity('{{cart_id}}', 'decrease')">-</button>
                <span class="quantity">{{quantity}}</span>
                <button class="quantity-btn" onclick="updateQuantity('{{cart_id}}', 'increase')">+</button>
              </div>
              <p class="item-price">${{price}} each</p>
            </div>
            <p class="item-total">Total: ${{multiply price quantity}}</p>
          </div>
        </div>
      {{/each}}
    </div>
  {{else}}
    <div class="empty-cart">
      <img src="https://img.freepik.com/free-vector/supermarket-shopping-cart-concept-illustration_114360-22408.jpg?t=st=1745064573~exp=1745068173~hmac=e1b52ca8c08607d40781a7153fc91643dbe5652c7974c09c8e4860c789510243&w=740" alt="Empty cart" class="empty-cart-icon" />
      <h3>Your cart is empty</h3>
      <p>Looks like you haven't added any cakes yet</p>
      <a href="/gallery" class="btn">Browse Our Cakes</a>
    </div>
  {{/if}}
</section>

<script>
// Global cart functions
async function updateQuantity(cartId, action) {
  try {
    const response = await fetch(`/cart/update/${cartId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ action })
    });
    
    const data = await response.json();
    
    if (data.success) {
      // Update the UI
      const cartItem = document.querySelector(`.cart-item[data-cart-id="${cartId}"]`);
      const quantityElement = cartItem.querySelector('.quantity');
      const price = parseFloat(cartItem.dataset.price);
      const totalElement = cartItem.querySelector('.item-total');
      
      if (action === 'increase') {
        quantityElement.textContent = parseInt(quantityElement.textContent) + 1;
      } else {
        const newQuantity = parseInt(quantityElement.textContent) - 1;
        if (newQuantity < 1) {
          removeCartItem(cartId);
          return;
        }
        quantityElement.textContent = newQuantity;
      }
      
      // Update item total
      totalElement.textContent = `Total: $${(price * parseInt(quantityElement.textContent)).toFixed(2)}`;
      
      // Update cart summary
      updateCartSummary();
    } else {
      showToast(data.message || 'Failed to update quantity', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    showToast('An error occurred', 'error');
  }
}

async function removeCartItem(cartId) {
  if (!confirm('Are you sure you want to remove this item?')) return;
  
  try {
    const response = await fetch(`/cart/remove/${cartId}`, {
      method: 'POST'
    });
    
    const data = await response.json();
    
    if (data.success) {
      // Remove item from UI
      document.querySelector(`.cart-item[data-cart-id="${cartId}"]`)?.remove();
      
      // Update cart count in header
      updateCartCount(data.count);
      
      // Update cart summary or show empty cart if needed
      if (data.count === 0) {
        showEmptyCart();
      } else {
        updateCartSummary();
      }
      
      showToast('Item removed from cart', 'success');
    } else {
      showToast(data.message || 'Failed to remove item', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    showToast('An error occurred', 'error');
  }
}

function updateCartSummary() {
  // Calculate new totals from the UI
  let subtotal = 0;
  document.querySelectorAll('.cart-item').forEach(item => {
    const price = parseFloat(item.dataset.price);
    const quantity = parseInt(item.querySelector('.quantity').textContent);
    subtotal += price * quantity;
  });
  
  const total = subtotal;
  
  // Update summary
  const subtotalElement = document.querySelector('.summary-row:nth-child(1) span:last-child');
  const totalElement = document.querySelector('.summary-row.total span:last-child');
  
  if (subtotalElement) {
    subtotalElement.textContent = `$${subtotal.toFixed(2)}`;
  }
  
  if (totalElement) {
    totalElement.textContent = `$${total.toFixed(2)}`;
  }
}

function showEmptyCart() {
  document.querySelector('.cart-items').innerHTML = `
    <div class="empty-cart">
      <img src="https://img.freepik.com/free-vector/supermarket-shopping-cart-concept-illustration_114360-22408.jpg?t=st=1745064573~exp=1745068173~hmac=e1b52ca8c08607d40781a7153fc91643dbe5652c7974c09c8e4860c789510243&w=740" alt="Empty cart" class="empty-cart-icon" />
      <h3>Your cart is empty</h3>
      <p>Looks like you haven't added any cakes yet</p>
      <a href="/gallery" class="btn">Browse Our Cakes</a>
    </div>
  `;
  document.querySelector('.cart-summary').style.display = 'none';
}

function updateCartCount(count) {
  document.querySelector('.cart-count').textContent = count;
}

function showToast(message, type) {
  const toast = document.createElement('div');
  toast.className = `toast ${type}`;
  toast.textContent = message;
  document.body.appendChild(toast);
  
  setTimeout(() => {
    toast.remove();
  }, 3000);
}
</script>

<style>
.cart {
  max-width: 1200px;
  margin: 2rem auto;
  padding: 0 1rem;
}

.cart h2 {
  text-align: center;
  margin-bottom: 2rem;
  color: var(--primary-color);
}

.cart-items {
  margin-bottom: 2rem;
}

.cart-item {
  display: flex;
  gap: 1.5rem;
  padding: 1.5rem;
  border: 1px solid #eee;
  border-radius: 8px;
  margin-bottom: 1rem;
  background: white;
}

.cart-item-image {
  width: 120px;
  height: 120px;
  object-fit: cover;
  border-radius: 8px;
}

.item-details {
  flex: 1;
}

.item-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
}

.item-header h3 {
  margin: 0;
  font-size: 1.2rem;
}

.remove-item {
  background: none;
  border: none;
  cursor: pointer;
  color: #999;
  padding: 0.25rem;
}

.remove-item:hover {
  color: var(--error-color);
}

.item-description {
  color: #666;
  margin: 0.5rem 0;
  font-size: 0.9rem;
}

.item-controls {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin: 1rem 0;
}

.quantity-controls {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.quantity-btn {
  width: 30px;
  height: 30px;
  border-radius: 50%;
  border: 1px solid #ddd;
  background: white;
  font-size: 1rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
}

.quantity-btn:hover {
  background: #f5f5f5;
}

.item-price {
  font-weight: bold;
  color: var(--primary-color);
}

.item-total {
  font-weight: bold;
  text-align: right;
  margin-top: 0.5rem;
}

.cart-summary {
  background: white;
  padding: 1.5rem;
  border-radius: 8px;
  border: 1px solid #eee;
}

.summary-row {
  display: flex;
  justify-content: space-between;
  margin-bottom: 1rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #eee;
}

.summary-row.total {
  font-weight: bold;
  font-size: 1.1rem;
  border-bottom: none;
  margin-bottom: 1.5rem;
}

.checkout-btn {
  width: 100%;
  text-align: center;
  margin-bottom: 1rem;
}

.continue-shopping {
  display: block;
  text-align: center;
  color: var(--primary-color);
}

.empty-cart {
  text-align: center;
  padding: 3rem 0;
}

.empty-cart-icon {
  width: 120px;
  height: 120px;
  margin-bottom: 1rem;
  opacity: 0.6;
}

.empty-cart h3 {
  margin-bottom: 0.5rem;
}

.empty-cart p {
  color: #666;
  margin-bottom: 1.5rem;
}

.toast {
  position: fixed;
  bottom: 20px;
  right: 20px;
  padding: 1rem;
  border-radius: 4px;
  color: white;
  z-index: 1000;
  animation: slideIn 0.3s ease-out;
}

.toast.success {
  background: var(--success-color);
}

.toast.error {
  background: var(--error-color);
}

@keyframes slideIn {
  from { transform: translateY(100%); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}

@media (max-width: 768px) {
  .cart-item {
    flex-direction: column;
  }
  
  .cart-item-image {
    width: 100%;
    height: auto;
  }
}
</style>
{{> template/footer}}